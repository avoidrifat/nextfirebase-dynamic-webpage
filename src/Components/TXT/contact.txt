/* eslint-disable @next/next/no-img-element */
/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable react-hooks/rules-of-hooks */
import React, { useEffect, useState } from "react";
import Link from "next/link";
import { db, storage } from "../../../firebaseConfig";
import {
  addDoc,
  collection,
  doc,
  getDocs,
  serverTimestamp,
  updateDoc,
} from "@firebase/firestore";

const editContact = () => {
  const [headerTitle, setHeaderTitle] = useState("");
  const [paragraph, setParagraph] = useState("");
  const [email, setEmail] = useState("");
  const [address1, setAddress1] = useState("");
  const [address2, setAddress2] = useState("");
  const contactPageRef = collection(db, "contactpage");
  const [loading, setLoading] = useState(true);
  const [isUpdate, setIsUpdate] = useState(false);

  //GET DATA HERE
  const [data, setData] = useState([]);
  useEffect(() => {
    getData();
  }, []);
  const getData = async () => {
    await getDocs(contactPageRef).then((response) => {
      setLoading(false);
      setData(
        response.docs.map((data) => {
          return { ...data.data(), id: data.id };
        })
      );
    });
  };

  //UPLOAD FILE
  const uploadHandler = async (e) => {
    e.preventDefault();
    addDoc(contactPageRef, {
      headerTitle,
      paragraph,
      email,
      address1,
      address2,
    })
      .then(() => {
        alert("Data added");

        setHeaderTitle("");
        setParagraph("");
        setEmail("");
        setAddress1("");
        setAddress2("");
      })
      .catch((err) => {
        console.error;
      });
  };

  //UPDATE DATA HERE
  const [ID, setID] = useState("");
  //getting the single data onclick
  const getSingleData = (
    id,
    headerTitle,
    paragraph,
    email,
    address1,
    address2
  ) => {
    setID(id);
    setHeaderTitle(headerTitle);
    setParagraph(paragraph);
    setEmail(email);
    setAddress1(address1);
    setAddress2(address2);
    setIsUpdate(true);
  };

//UPDATE FUNCTION
const updateData = async (e) => {
  e.preventDefault();
  let fieldToEdit = doc(db, "contactpage", ID);

  updateDoc(fieldToEdit, {
    headerTitle: headerTitle,
    paragraph: paragraph,
    email: email,
    address1:address1,
    address2:address2,
    Timestamp: serverTimestamp(),
  })
    .then(() => {
      alert("Data Updated");
      getData();
      setIsUpdate(false);
    })
    .catch((err) => {
      console.log(err);
    });
};


  return (
    <>
      <div>
        {isUpdate ? (
          <div>
            <section class="p-6 ">
            <form
              // onSubmit={updateData}
              onSubmit={uploadHandler}
              novalidate=""
              class="bg-gray-900 container w-full max-w-xl p-8 mx-auto space-y-6"
            >
              <h2 class="w-full text-3xl font-bold leadi">Edit Contact Page</h2>

              <div>
                <label for="headerTitle" class="block mb-1 ml-1">
                  Header Title
                </label>
                <input
                  onChange={(event) => {
                    setHeaderTitle(event.target.value);
                  }}
                  type="text"
                  value={headerTitle}
                  required=""
                  class="block w-full p-2 rounded focus:outline-none focus:ring focus:ri focus:ri dark:text-gray-900 "
                />
              </div>
              <div>
                <label for="message" class="block mb-1 ml-1">
                Header Paragraph
                </label>
                <textarea
                  onChange={(event) => {
                    setParagraph(event.target.value);
                  }}
                  type="text"
                  value={paragraph}
                  class="block w-full p-2 rounded autoexpand focus:outline-none focus:ring text-gray-900 "
                  data-gramm="false"
                  wt-ignore-input="true"
                ></textarea>
              </div>
              <div>
                <label for="email" class="block mb-1 ml-1">
                  Email
                </label>
                <input
                  onChange={(event) => {
                    setEmail(event.target.value);
                  }}
                  type="text"
                  value={email}
                  required=""
                  class="block w-full p-2 rounded focus:outline-none focus:ring "
                />
              </div>
              <div>
                <label for="message" class="block mb-1 ml-1">
                Address 1
                </label>
                <textarea
                  onChange={(event) => {
                    setAddress1(event.target.value);
                  }}
                  value={address1}
                  id="message"
                  type="text"
                  class="block w-full p-2 rounded autoexpand focus:outline-none focus:ring text-gray-900"
                  data-gramm="false"
                  wt-ignore-input="true"
                ></textarea>
              </div>
              <div>
                <label for="message" class="block mb-1 ml-1">
                Address 2
                </label>
                <textarea
                  onChange={(event) => {
                    setAddress2(event.target.value);
                  }}
                  value={address2}
                  id="message"
                  type="text"
                  class="block w-full p-2 rounded autoexpand focus:outline-none focus:ring text-gray-900"
                  data-gramm="false"
                  wt-ignore-input="true"
                ></textarea>
              </div>

              <div>
                <button type="submit" class="btn btn-block">
                  Submit
                </button>
              </div>
              <div href="/" className="flex flex-row justify-between ">
                <button
                  onClick={() => setIsUpdate(false)}
                  className="btn btn-circle btn-outline "
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="w-6 h-6"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="white"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="5"
                      d="M6 18L18 6M6 6l12 12"
                    />
                  </svg>
                </button>

                <Link href="/admin" className="btn btn-link">
                  Admin
                </Link>
              </div>
            </form>
          </section>
          </div>
        ) : (
          <div>
            {data.map((d) => {
            return (
              <>
                <div
                  key={d.id}
                  className="mt-20 text-gray-900 shadow-xl card lg:card-side bg-base-100"
                >
                  <figure>
                    <img src={d.url} alt="image" />
                  </figure>
                  <div class="card-body">
                    <h2 class="card-title">Page Title:{d.headerTitle}</h2>
                    <p>Page Info:{d.paragraph}</p>
                    <p>Email:{d.email}</p>
                    <p>Address 1:{d.address1}</p>
                    <p>Address 2:{d.address2}</p>

                    <div class="card-actions justify-end">
                      <button
                        onClick={() =>
                          getSingleData(
                            d.id,
                            d.headerTitle,
                            d.paragraph,
                            d.email,
                            d.address1,
                            d.address2,
                          )
                        }
                        class="btn btn-primary"
                      >
                        Edit
                      </button>
                      <button
                        onClick={() => deleteData(d.id, d.allImages)}
                        className="btn btn-error"
                      >
                        Delete
                      </button>
                    </div>
                  </div>
                </div>
              </>
            );
          })}
          </div>
        )}
      </div>
    </>
  );
};

export default editContact;
